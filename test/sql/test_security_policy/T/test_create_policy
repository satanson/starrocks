-- name: test_create_policy
CREATE DATABASE test_create_policy;
use test_create_policy;

create masking policy mp as ( v1 bigint) returns bigint -> v1 + 1;
show masking policies;
show create masking policy mp;

create row access policy rp as (v1 bigint) returns boolean -> true;
show row access policies;
show create row access policy rp;
alter row access policy if exists not_exists_policy set comment = "foo";
alter row access policy rp set body -> row(0, 1);
alter row access policy rp set body -> if (v2 = 2, true, false);
alter row access policy rp set body -> if (v1 = 2, row(0, 1), row(1,1));

-- Test create and alter masking policy analyze
create masking policy policy_struct as (col struct<s1 int,sa2 int>) returns struct<s1 int,sa2 int>
    -> case when current_role() = 'root' then row(0) else col end;
create masking policy policy_struct as (col struct<s1 int,sa2 int>) returns struct<s1 int,sa2 int>
    -> case when current_role() = 'root' then row(0,0) else col end;
alter masking policy if exists not_exists_policy set comment = "foo";
alter masking policy if exists policy_struct set body -> case when current_role() = 'root' then row(0) else col end;
alter masking policy if exists policy_struct set body -> case when current_role() = 'root' then row(0, 0) else col end;
alter masking policy policy_struct set body -> col2;

create row access policy rp1 as (col array<int>) returns boolean -> cast('[1,1]' as array<int>);

create masking policy policy_map as (col map<int,int>) returns map<int,int> ->
            case when current_role() = 'root' then map{0:0} else col end;
show create masking policy policy_map;
create masking policy policy_struct2 as (col struct<s1 int,sa2 int>) returns struct<s1 int,sa2 int> ->
            case when current_role() = 'root' then row(0,0) else row(-1,-1) end;
show create masking policy policy_struct2;


-- Test create policy with different database
create database test_create_policy_2;
use test_create_policy_2;

CREATE TABLE sales_manager (
  region        varchar(20),
  sales_manager varchar(20)
)
PRIMARY KEY(`region`)
DISTRIBUTED BY HASH(`region`) BUCKETS 10
PROPERTIES ("replication_num" = "1");

CREATE ROW ACCESS POLICY sales_policy
    AS (sales_region varchar) RETURNS BOOLEAN -> EXISTS (
            SELECT 1 FROM sales_manager where trim(split(current_user(), '@')[1], "'") = sales_manager and region = sales_region
    )
;

show create row access policy sales_policy;

create database test_create_policy_3;
use test_create_policy_3;
CREATE ROW ACCESS POLICY sales_policy
    AS (sales_region varchar) RETURNS BOOLEAN -> EXISTS (
            SELECT 1 FROM sales_manager where trim(split(current_user(), '@')[1], "'") = sales_manager and region = sales_region
    )
;

CREATE ROW ACCESS POLICY sales_policy
    AS (sales_region varchar) RETURNS BOOLEAN -> EXISTS (
            SELECT 1 FROM test_create_policy_2.sales_manager where trim(split(current_user(), '@')[1], "'") = sales_manager and region = sales_region
    )
;

show create row access policy sales_policy;

-- Test system table
create row access policy policy01 as (col int) returns boolean -> current_role() = 'root'
    and col = ( select sum(CHARACTER_MAXIMUM_LENGTH) as revenue from information_schema.columns order by revenue desc );
show create row access policy policy01;