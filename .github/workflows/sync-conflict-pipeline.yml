name: SYNC CONFLICT CHECK PIPELINE

on:
  pull_request_target:
    types:
      - opened
      - synchronize

    branches:
      - main
      - 'branch-[0-9].[0-9]'

concurrency:
  group: ${{ github.event.number }}-conflict
  cancel-in-progress: true

permissions:
  checks: write
  actions: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  pr-label:
    runs-on: [ self-hosted, sync-normal ]
    env:
      PR_NUMBER: ${{ github.event.number }}
    outputs:
      labels: ${{ steps.labels.outputs.LABELS }}
    steps:
      - run: sleep 10
      - name: Get PR labels
        id: labels
        run: |
          set -x 
          labels=`curl -L \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: token ${{ secrets.SYNC_PAT }}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER} 2>/dev/null \
                  | jq '.labels[].name'`
          labels=`echo "$labels" | tr "\"" " " | tr "\n" " "`
          echo "LABELS=$labels" >> $GITHUB_OUTPUT

  sync-checker:
    runs-on: ubuntu-latest
    needs: pr-label
    if: >
      contains(github.event.pull_request.title, '(sync #') &&
      contains(needs.pr-label.outputs.labels, 'sync') &&
      contains(needs.pr-label.outputs.labels, 'conflict')
    name: RUN CHECKER
    steps:
      - run: echo "success"
      - run: |
          echo "${{ github.event.pull_request.title }}"
          echo "${{ github.head_ref }}"

  code-checker:
    runs-on: ubuntu-latest
    needs: sync-checker
    name: BE FILTER
    outputs:
      output1: ${{ steps.changes-info.outputs.be }}
      output2: ${{ steps.changes-info.outputs.thirdparty }}
      output3: ${{ steps.changes-info.outputs.fe }}
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            be:
              - 'be/**'
              - 'gensrc/**'
              - 'run-be-ut.sh'
              - 'build.sh'
              - 'thirdparty/**'
              - 'docker/dockerfiles/dev-env/dev-env.Dockerfile'
            thirdparty:
              - 'thirdparty/**'
              - 'docker/dockerfiles/dev-env/dev-env.Dockerfile'
            fe:
              - 'fe/**'
              - 'gensrc/**'
              - 'run-fe-ut.sh'
              - 'java-extensions/**'
              - 'build.sh'
              - 'test/**'

      - name: CHECK INFO
        id: changes-info
        run: |
          echo "be=${{ steps.changes.outputs.be }}" >> $GITHUB_OUTPUT
          echo "thirdparty=${{ steps.changes.outputs.thirdparty }}" >> $GITHUB_OUTPUT
          echo "fe=${{ steps.changes.outputs.fe }}" >> $GITHUB_OUTPUT

  build:
    runs-on: [self-hosted, normal]
    needs: [code-checker]
    name: BUILD
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    outputs:
      build_output_tar: ${{ steps.run_build.outputs.OUTPUT_TAR }}
      base_version: ${{ steps.run_build.outputs.BASE_VERSION }}
    if: needs.code-checker.outputs.output1 == 'true' || needs.code-checker.outputs.output2 == 'true' || needs.code-checker.outputs.output3 == 'true'
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo "branch=${{github.base_ref}}" >> $GITHUB_OUTPUT

      - name: UPDATE ECI & RUN BUILD
        id: run_build
        shell: bash
        timeout-minutes: 90
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/elastic-build.sh --pr ${PR_NUMBER} --branch ${BRANCH} --repository ${{ github.repository }}

      - name: build result
        run: |
          echo ${{ steps.run_build.outputs.OUTPUT_TAR }}

      - name: clean ECI
        if: always()
        run: |
          echo ${{ steps.run_build.outputs.ECI_ID }}
          eci rm ${{ steps.run_build.outputs.ECI_ID }}

      - name: Clean ENV
        if: always()
        run: |
          rm -f ${{ steps.run_build.outputs.RES_FILE }}
          rm -f ${{ steps.run_build.outputs.RES_LOG }}
