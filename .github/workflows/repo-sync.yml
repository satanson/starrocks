name: Repo Sync

on:

  workflow_dispatch:
    inputs:
      PR_ID:
        description: 'ORI PR ID'
        required: true
        type: string
      COMMIT_ID:
        description: 'ORI COMMIT ID'
        required: true
        type: string
      BRANCH:
        description: 'TARGET BRANCH'
        required: true
        type: string
        default: 'main'
      DEBUG:
        required: true
        type: boolean
        default: false

permissions:
  checks: write
  actions: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:

  pr-info:
    name: Add PR Information
    runs-on: ubuntu-latest
    outputs:
      assignees: ${{ steps.ori_pr_info.outputs.assignees }}
      body: ${{ steps.ori_pr_info.outputs.body }}
      title: ${{ steps.ori_pr_info.outputs.title }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/setup-python@v4
        with:
          python-version: 'pypy3.9'

      - name: install
        run: |
          python3 -m pip install requests

      - name: Ori PR Info
        id: ori_pr_info
        run: |
          set -x
          info=`curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.SYNC_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/starrocks/starrocks/pulls/${{ inputs.PR_ID }} 2>/dev/null`
          assignees=`echo ${info} | jq .assignee.login`
          assignees=`echo $assignees | sed 's/"//g' | sed 's/ /, /g'`
          assignees=andyziye
          body=`echo ${info} | jq .body | sed 's#\n#<br />#g'`
          title=`echo ${info} | jq .title | sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/'`
          echo "assignees=${assignees}" >> $GITHUB_OUTPUT
          echo "body=${body//\`/\\\`}" >> $GITHUB_OUTPUT
          echo "title=${title}" >> $GITHUB_OUTPUT

  repo-sync:
    name: Repo Sync
    runs-on: ubuntu-latest
    needs: pr-info
    steps:
      - name: Clean Branches
        env:
          source_branch: ${{ inputs.BRANCH }}-sync-${{ inputs.PR_ID }}
          destination_branch: ${{ inputs.BRANCH }}-sync-pr-${{ inputs.PR_ID }}
        run: |
          curl -s -X DELETE -u username:${{secrets.SYNC_PAT}} https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ env.source_branch }}
          curl -s -X DELETE -u username:${{secrets.SYNC_PAT}} https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ env.destination_branch }}

      - name: Prepare PR Info
        id: prepare_pr_info
        run: |
          set -x
          echo ${{ needs.pr-info.outputs.body }} > tmp_info.txt
          sed -i 's#\\r\\n#\r\n#g' tmp_info.txt
          echo PR_BODY=`cat tmp_info.txt` >> $GITHUB_ENV
          rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SYNC_PAT }}
          fetch-depth: 0
          ref: ${{ inputs.BRANCH }}

      - uses: repo-sync/github-sync@v2
        name: Sync repo to branch
        with:
          source_repo: StarRocks/starrocks
          source_branch: ${{ inputs.BRANCH }}
          destination_branch: ${{ inputs.BRANCH }}-sync-${{ inputs.PR_ID }}
          github_token: ${{ secrets.SYNC_PAT }}

      - name: pr branch
        run: |
          pr_branch=${{ inputs.BRANCH }}-sync-pr-${{ inputs.PR_ID }}
          git branch ${pr_branch} ${{ inputs.BRANCH }}
          git checkout ${pr_branch}
          git push -u origin ${pr_branch}

      - name: checkout tools
        uses: actions/checkout@v3
        with:
          repository: StarRocks/elastic-service
          path: './elastic-service'
          token: ${{ secrets.SYNC_PAT }}

      - name: previous check
        id: previous-check
        run: |
          cd ${{ github.workspace }}/elastic-service
          check_res=$(python3 lib/pr_sequence_checker.py new ${{ inputs.BRANCH }} ${{ inputs.PR_ID }} ${{ inputs.COMMIT_ID }})
          echo ${check_res}
          conflict_prs=$(echo ${check_res} | awk -F'Files:' '{print $1}' | awk -F' ' '{print $NF}')
          echo CONFLICT_PRS=${conflict_prs} >> $GITHUB_OUTPUT
          check_res=$(echo $check_res | tail -n 1)
          echo RES=${check_res} >> $GITHUB_OUTPUT

      - name: cherry pick
        id: cherry-pick
        run: |
          cd ${{ github.workspace }}/elastic-service
          ./lib/run_cherry_pick.sh -c ${{ inputs.COMMIT_ID }}
          cd ${{ github.workspace }}
          rm -rf ${{ github.workspace }}/elastic-service
          git commit -m "${{ needs.pr-info.outputs.title }}" --allow-empty
          git push -u origin ${{ inputs.BRANCH }}-sync-pr-${{ inputs.PR_ID }}

      - uses: repo-sync/pull-request@v2.12.1
        name: Create pull request
        if: steps.previous-check.outputs.RES == 'True'
        with:
          source_branch: ${{ inputs.BRANCH }}-sync-pr-${{ inputs.PR_ID }}
          destination_branch: ${{ inputs.BRANCH }}
          pr_label: "sync,${{ inputs.BRANCH }},SHA:${{ inputs.COMMIT_ID }}${{ steps.cherry-pick.outputs.CONFLICT_LABEL }}"
          pr_title: "${{ needs.pr-info.outputs.title }}(sync #${{ inputs.PR_ID }})"
          pr_body: ${{ steps.cherry-pick.outputs.CONFLICT_INFO }}${{ env.PR_BODY }}
          github_token: ${{ secrets.SYNC_PAT }}
          pr_reviewer: ${{ needs.pr-info.outputs.assignees }}
          pr_allow_empty: true

      # previous pr files' check conflict
      - name: Create pending pull request
        if: steps.previous-check.outputs.RES != 'True'
        uses: repo-sync/pull-request@v2.12.1
        with:
          source_branch: ${{ inputs.BRANCH }}-sync-pr-${{ inputs.PR_ID }}
          destination_branch: ${{ inputs.BRANCH }}
          pr_label: "sync,${{ inputs.BRANCH }},SHA:${{ inputs.COMMIT_ID }},pending"
          pr_title: "${{ needs.pr-info.outputs.title }}(sync #${{ inputs.PR_ID }})"
          pr_body: |
            Previous prs: ${{ steps.previous-check.outputs.CONFLICT_PRS }}
          github_token: ${{ secrets.SYNC_PAT }}
          pr_reviewer: ${{ needs.pr-info.outputs.assignees }}
          pr_allow_empty: true

      # Unexpected failure
      - name: fail checker
        id: fail-checker
        if: always() && steps.cherry-pick.outcome == 'failure'
        uses: repo-sync/pull-request@v2.12.1
        env:
          source_branch: ${{ inputs.BRANCH }}-sync-${{ inputs.PR_ID }}
          destination_branch: ${{ inputs.BRANCH }}-sync-pr-${{ inputs.PR_ID }}
        with:
          source_branch: ${{ env.source_branch }}
          destination_branch: ${{ env.destination_branch }}
          pr_label: "sync,${{ inputs.BRANCH }},SHA:${{ inputs.COMMIT_ID }},conflict,error"
          pr_title: "${{ needs.pr-info.outputs.title }}(sync #${{ inputs.PR_ID }})"
          pr_body: |
            # ERROR, please contact us.<br />
            ## cherry-pick #${{ inputs.PR_ID }}(${{ inputs.COMMIT_ID }}) from ${{ env.source_branch }} to ${{ env.destination_branch }} error<br />
            please fix this and then create pr to ${{ inputs.BRANCH }}!<br />
            ${{ env.PR_BODY }}
          github_token: ${{ secrets.SYNC_PAT }}
          pr_reviewer: ${{ needs.pr-info.outputs.assignees }}

